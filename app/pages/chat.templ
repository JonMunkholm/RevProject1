package pages

import (
    "fmt"
    "strings"
    "time"

    "github.com/JonMunkholm/RevProject1/app/layout"
)

type ChatProvider struct {
    ID    string
    Label string
}

type ChatMessageView struct {
    ID        string
    Role      string
    Content   string
    CreatedAt time.Time
}

type ChatPageProps struct {
    Providers           []ChatProvider
    ActiveProviderID    string
    ActiveProviderLabel string
    ConversationID      string
    Messages            []ChatMessageView
    BlockedReason       string
    ErrorMessage        string
}

type ChatTranscriptProps struct {
    ConversationID string
    Messages       []ChatMessageView
    BlockedReason  string
    ErrorMessage   string
}

templ ChatPage(props ChatPageProps) {
    @layout.LayoutWithAssets(
        "Chat",
        []string{
            "/assets/css/settings.css",
            "/assets/css/chat.css",
        },
        ChatShell(props),
    )
}

templ ChatShell(props ChatPageProps) {
    <div class="chat-layout" id="chat-root">
        <aside class="chat-layout__sidebar">
            <header class="chat-layout__sidebar-header">
                <h2>Providers</h2>
                <p>Select a provider to start chatting.</p>
            </header>
            if len(props.Providers) == 0 {
                <p class="chat-layout__empty">No providers available. Add credentials in Settings â†’ AI.</p>
            } else {
                <ul class="chat-provider-list">
                    for _, provider := range props.Providers {
                        <li class={chatProviderClasses(provider.ID == props.ActiveProviderID)}>
                            <button
                                type="button"
                                hx-post="/app/chat/conversations"
                                hx-target="#chat-root"
                                hx-swap="outerHTML"
                                hx-encoding="json"
                                hx-vals={fmt.Sprintf("{\"provider\":\"%s\"}", provider.ID)}
                                hx-push-url={fmt.Sprintf("/app/chat?provider=%s", provider.ID)}
                            >
                                {provider.Label}
                            </button>
                        </li>
                    }
                </ul>
            }
        </aside>
        <section class="chat-layout__main">
            <header class="chat-layout__main-header">
                <div>
                    <h1>{props.ActiveProviderLabel}</h1>
                    if props.BlockedReason != "" {
                        <p class="chat-layout__notice">{props.BlockedReason}</p>
                    }
                </div>
                <div class="chat-layout__actions">
                    <button
                        type="button"
                        class="chat-button chat-button--ghost"
                        hx-post="/app/chat/conversations"
                        hx-target="#chat-root"
                        hx-swap="outerHTML"
                        hx-encoding="json"
                        hx-vals={fmt.Sprintf("{\"provider\":\"%s\"}", props.ActiveProviderID)}
                    >
                        New conversation
                    </button>
                </div>
            </header>
            <div id="chat-transcript">
                @ChatTranscript(ChatTranscriptProps{
                    ConversationID: props.ConversationID,
                    Messages: props.Messages,
                    BlockedReason: props.BlockedReason,
                    ErrorMessage: props.ErrorMessage,
                })
            </div>
        </section>
    </div>
}

templ ChatTranscript(props ChatTranscriptProps) {
    <div class="chat-transcript">
        if props.ErrorMessage != "" {
            <div class="chat-transcript__notice chat-transcript__notice--error" role="alert">
                {props.ErrorMessage}
            </div>
        }
        if len(props.Messages) == 0 {
            <div class="chat-transcript__empty">
                <p>Start the conversation by sending a message.</p>
            </div>
        } else {
            <ol class="chat-transcript__list">
                for _, msg := range props.Messages {
                    <li class={chatMessageClasses(msg.Role)}>
                        <div class="chat-message__meta">
                            <span class="chat-message__role">{displayRole(msg.Role)}</span>
                            <span class="chat-message__time">{msg.CreatedAt.Format("15:04")}</span>
                        </div>
                        <div class="chat-message__content">
                            <p>{msg.Content}</p>
                        </div>
                    </li>
                }
            </ol>
        }

        if props.BlockedReason != "" {
            <div class="chat-transcript__notice" role="alert">
                {props.BlockedReason}
            </div>
        } else if props.ConversationID != "" {
            <form
                class="chat-composer"
                hx-post={fmt.Sprintf("/app/chat/conversations/%s/messages", props.ConversationID)}
                hx-target="#chat-transcript"
                hx-swap="outerHTML"
                hx-encoding="json"
                hx-on::after-request="this.reset()"
            >
                <label class="chat-composer__label" for="chat-input">Message</label>
                <textarea
                    id="chat-input"
                    name="content"
                    required
                    rows="3"
                    placeholder="Ask a question or type a prompt..."
                ></textarea>
                <div class="chat-composer__actions">
                    <button type="submit" class="chat-button">Send</button>
                </div>
            </form>
        }
    </div>
}

func chatProviderClasses(active bool) string {
    if active {
        return "chat-provider-list__item chat-provider-list__item--active"
    }
    return "chat-provider-list__item"
}

func chatMessageClasses(role string) string {
    switch role {
    case "assistant":
        return "chat-message chat-message--assistant"
    case "system":
        return "chat-message chat-message--system"
    default:
        return "chat-message chat-message--user"
    }
}

func displayRole(role string) string {
    switch strings.ToLower(role) {
    case "assistant":
        return "Assistant"
    case "system":
        return "System"
    default:
        return "You"
    }
}
