// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: performance_obligations.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addBundleToPerformanceObligation = `-- name: AddBundleToPerformanceObligation :one
INSERT INTO bundle_performance_obligations (Bundle_ID, Performance_Obligations_ID)
SELECT b.ID, po.ID
FROM performance_obligations po
INNER JOIN contracts c ON c.ID = po.Contract_ID
INNER JOIN bundles b ON b.ID = $1 AND b.Company_ID = $3
WHERE po.ID = $2
AND c.Company_ID = $3
RETURNING bundle_id, performance_obligations_id
`

type AddBundleToPerformanceObligationParams struct {
	ID        uuid.UUID
	ID_2      uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) AddBundleToPerformanceObligation(ctx context.Context, arg AddBundleToPerformanceObligationParams) (BundlePerformanceObligation, error) {
	row := q.db.QueryRowContext(ctx, addBundleToPerformanceObligation, arg.ID, arg.ID_2, arg.CompanyID)
	var i BundlePerformanceObligation
	err := row.Scan(&i.BundleID, &i.PerformanceObligationsID)
	return i, err
}

const addProductToPerformanceObligation = `-- name: AddProductToPerformanceObligation :one
INSERT INTO product_performance_obligations (Product_ID, Performance_Obligations_ID)
SELECT p.ID, po.ID
FROM performance_obligations po
INNER JOIN contracts c ON c.ID = po.Contract_ID
INNER JOIN products p ON p.ID = $1 AND p.Company_ID = $3
WHERE po.ID = $2
AND c.Company_ID = $3
RETURNING product_id, performance_obligations_id
`

type AddProductToPerformanceObligationParams struct {
	ID        uuid.UUID
	ID_2      uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) AddProductToPerformanceObligation(ctx context.Context, arg AddProductToPerformanceObligationParams) (ProductPerformanceObligation, error) {
	row := q.db.QueryRowContext(ctx, addProductToPerformanceObligation, arg.ID, arg.ID_2, arg.CompanyID)
	var i ProductPerformanceObligation
	err := row.Scan(&i.ProductID, &i.PerformanceObligationsID)
	return i, err
}

const clearPerformanceObligationBundles = `-- name: ClearPerformanceObligationBundles :exec
DELETE FROM bundle_performance_obligations bpo
USING performance_obligations po,
      contracts c
WHERE bpo.Performance_Obligations_ID = $1
AND po.ID = bpo.Performance_Obligations_ID
AND c.ID = po.Contract_ID
AND c.Company_ID = $2
`

type ClearPerformanceObligationBundlesParams struct {
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) ClearPerformanceObligationBundles(ctx context.Context, arg ClearPerformanceObligationBundlesParams) error {
	_, err := q.db.ExecContext(ctx, clearPerformanceObligationBundles, arg.PerformanceObligationsID, arg.CompanyID)
	return err
}

const clearPerformanceObligationProducts = `-- name: ClearPerformanceObligationProducts :exec
DELETE FROM product_performance_obligations ppo
USING performance_obligations po,
      contracts c
WHERE ppo.Performance_Obligations_ID = $1
AND po.ID = ppo.Performance_Obligations_ID
AND c.ID = po.Contract_ID
AND c.Company_ID = $2
`

type ClearPerformanceObligationProductsParams struct {
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) ClearPerformanceObligationProducts(ctx context.Context, arg ClearPerformanceObligationProductsParams) error {
	_, err := q.db.ExecContext(ctx, clearPerformanceObligationProducts, arg.PerformanceObligationsID, arg.CompanyID)
	return err
}

const createPerformanceObligation = `-- name: CreatePerformanceObligation :one
INSERT INTO performance_obligations (
    Performance_Obligations_Name,
    Contract_ID,
    Start_Date,
    End_Date,
    Functional_Currency,
    Discount,
    Transaction_Price
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, performance_obligations_name, contract_id, created_at, updated_at, start_date, end_date, functional_currency, discount, transaction_price
`

type CreatePerformanceObligationParams struct {
	PerformanceObligationsName string
	ContractID                 uuid.UUID
	StartDate                  time.Time
	EndDate                    time.Time
	FunctionalCurrency         string
	Discount                   string
	TransactionPrice           int64
}

func (q *Queries) CreatePerformanceObligation(ctx context.Context, arg CreatePerformanceObligationParams) (PerformanceObligation, error) {
	row := q.db.QueryRowContext(ctx, createPerformanceObligation,
		arg.PerformanceObligationsName,
		arg.ContractID,
		arg.StartDate,
		arg.EndDate,
		arg.FunctionalCurrency,
		arg.Discount,
		arg.TransactionPrice,
	)
	var i PerformanceObligation
	err := row.Scan(
		&i.ID,
		&i.PerformanceObligationsName,
		&i.ContractID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.FunctionalCurrency,
		&i.Discount,
		&i.TransactionPrice,
	)
	return i, err
}

const deleteBundleFromPerformanceObligation = `-- name: DeleteBundleFromPerformanceObligation :exec
DELETE FROM bundle_performance_obligations bpo
USING performance_obligations po,
      contracts c,
      bundles b
WHERE bpo.Bundle_ID = $1
AND bpo.Performance_Obligations_ID = $2
AND po.ID = bpo.Performance_Obligations_ID
AND c.ID = po.Contract_ID
AND b.ID = bpo.Bundle_ID
AND c.Company_ID = $3
AND b.Company_ID = $3
`

type DeleteBundleFromPerformanceObligationParams struct {
	BundleID                 uuid.UUID
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) DeleteBundleFromPerformanceObligation(ctx context.Context, arg DeleteBundleFromPerformanceObligationParams) error {
	_, err := q.db.ExecContext(ctx, deleteBundleFromPerformanceObligation, arg.BundleID, arg.PerformanceObligationsID, arg.CompanyID)
	return err
}

const deletePerformanceObligation = `-- name: DeletePerformanceObligation :exec
DELETE FROM performance_obligations po
USING contracts c
WHERE po.ID = $1
AND c.ID = po.Contract_ID
AND c.Company_ID = $2
`

type DeletePerformanceObligationParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) DeletePerformanceObligation(ctx context.Context, arg DeletePerformanceObligationParams) error {
	_, err := q.db.ExecContext(ctx, deletePerformanceObligation, arg.ID, arg.CompanyID)
	return err
}

const deleteProductFromPerformanceObligation = `-- name: DeleteProductFromPerformanceObligation :exec
DELETE FROM product_performance_obligations ppo
USING performance_obligations po,
      contracts c,
      products p
WHERE ppo.Product_ID = $1
AND ppo.Performance_Obligations_ID = $2
AND po.ID = ppo.Performance_Obligations_ID
AND c.ID = po.Contract_ID
AND p.ID = ppo.Product_ID
AND c.Company_ID = $3
AND p.Company_ID = $3
`

type DeleteProductFromPerformanceObligationParams struct {
	ProductID                uuid.UUID
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) DeleteProductFromPerformanceObligation(ctx context.Context, arg DeleteProductFromPerformanceObligationParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductFromPerformanceObligation, arg.ProductID, arg.PerformanceObligationsID, arg.CompanyID)
	return err
}

const getAllPerformanceObligations = `-- name: GetAllPerformanceObligations :many
SELECT id, performance_obligations_name, contract_id, created_at, updated_at, start_date, end_date, functional_currency, discount, transaction_price FROM performance_obligations
`

func (q *Queries) GetAllPerformanceObligations(ctx context.Context) ([]PerformanceObligation, error) {
	rows, err := q.db.QueryContext(ctx, getAllPerformanceObligations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerformanceObligation
	for rows.Next() {
		var i PerformanceObligation
		if err := rows.Scan(
			&i.ID,
			&i.PerformanceObligationsName,
			&i.ContractID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.FunctionalCurrency,
			&i.Discount,
			&i.TransactionPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligation = `-- name: GetPerformanceObligation :one
SELECT po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
FROM performance_obligations po
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE po.ID = $1
AND c.Company_ID = $2
`

type GetPerformanceObligationParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) GetPerformanceObligation(ctx context.Context, arg GetPerformanceObligationParams) (PerformanceObligation, error) {
	row := q.db.QueryRowContext(ctx, getPerformanceObligation, arg.ID, arg.CompanyID)
	var i PerformanceObligation
	err := row.Scan(
		&i.ID,
		&i.PerformanceObligationsName,
		&i.ContractID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.FunctionalCurrency,
		&i.Discount,
		&i.TransactionPrice,
	)
	return i, err
}

const getPerformanceObligationBundles = `-- name: GetPerformanceObligationBundles :many
SELECT b.id, b.bundle_name, b.is_active, b.company_id, b.created_at, b.updated_at
FROM bundle_performance_obligations bpo
INNER JOIN bundles b ON b.ID = bpo.Bundle_ID
INNER JOIN performance_obligations po ON po.ID = bpo.Performance_Obligations_ID
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE bpo.Performance_Obligations_ID = $1
AND c.Company_ID = $2
ORDER BY b.Bundle_Name
`

type GetPerformanceObligationBundlesParams struct {
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) GetPerformanceObligationBundles(ctx context.Context, arg GetPerformanceObligationBundlesParams) ([]Bundle, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationBundles, arg.PerformanceObligationsID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bundle
	for rows.Next() {
		var i Bundle
		if err := rows.Scan(
			&i.ID,
			&i.BundleName,
			&i.IsActive,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligationProducts = `-- name: GetPerformanceObligationProducts :many
SELECT p.id, p.prod_name, p.rev_assessment, p.over_time_percent, p.point_in_time_percent, p.standalone_selling_price_method, p.standalone_selling_price_price_high, p.standalone_selling_price_price_low, p.company_id, p.is_active, p.default_currency, p.created_at, p.updated_at
FROM product_performance_obligations ppo
INNER JOIN products p ON p.ID = ppo.Product_ID
INNER JOIN performance_obligations po ON po.ID = ppo.Performance_Obligations_ID
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE ppo.Performance_Obligations_ID = $1
AND c.Company_ID = $2
ORDER BY p.Prod_Name
`

type GetPerformanceObligationProductsParams struct {
	PerformanceObligationsID uuid.UUID
	CompanyID                uuid.UUID
}

func (q *Queries) GetPerformanceObligationProducts(ctx context.Context, arg GetPerformanceObligationProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationProducts, arg.PerformanceObligationsID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProdName,
			&i.RevAssessment,
			&i.OverTimePercent,
			&i.PointInTimePercent,
			&i.StandaloneSellingPriceMethod,
			&i.StandaloneSellingPricePriceHigh,
			&i.StandaloneSellingPricePriceLow,
			&i.CompanyID,
			&i.IsActive,
			&i.DefaultCurrency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligationsForBundle = `-- name: GetPerformanceObligationsForBundle :many
SELECT po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
FROM bundle_performance_obligations bpo
INNER JOIN performance_obligations po ON po.ID = bpo.Performance_Obligations_ID
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE bpo.Bundle_ID = $1
AND c.Company_ID = $2
ORDER BY po.Start_Date
`

type GetPerformanceObligationsForBundleParams struct {
	BundleID  uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) GetPerformanceObligationsForBundle(ctx context.Context, arg GetPerformanceObligationsForBundleParams) ([]PerformanceObligation, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationsForBundle, arg.BundleID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerformanceObligation
	for rows.Next() {
		var i PerformanceObligation
		if err := rows.Scan(
			&i.ID,
			&i.PerformanceObligationsName,
			&i.ContractID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.FunctionalCurrency,
			&i.Discount,
			&i.TransactionPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligationsForCompany = `-- name: GetPerformanceObligationsForCompany :many
SELECT po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
FROM performance_obligations po
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE c.Company_ID = $1
ORDER BY po.Start_Date, po.Performance_Obligations_Name
`

func (q *Queries) GetPerformanceObligationsForCompany(ctx context.Context, companyID uuid.UUID) ([]PerformanceObligation, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationsForCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerformanceObligation
	for rows.Next() {
		var i PerformanceObligation
		if err := rows.Scan(
			&i.ID,
			&i.PerformanceObligationsName,
			&i.ContractID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.FunctionalCurrency,
			&i.Discount,
			&i.TransactionPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligationsForContract = `-- name: GetPerformanceObligationsForContract :many
SELECT po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
FROM performance_obligations po
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE po.Contract_ID = $1
AND c.Company_ID = $2
ORDER BY po.Start_Date
`

type GetPerformanceObligationsForContractParams struct {
	ContractID uuid.UUID
	CompanyID  uuid.UUID
}

func (q *Queries) GetPerformanceObligationsForContract(ctx context.Context, arg GetPerformanceObligationsForContractParams) ([]PerformanceObligation, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationsForContract, arg.ContractID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerformanceObligation
	for rows.Next() {
		var i PerformanceObligation
		if err := rows.Scan(
			&i.ID,
			&i.PerformanceObligationsName,
			&i.ContractID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.FunctionalCurrency,
			&i.Discount,
			&i.TransactionPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerformanceObligationsForProduct = `-- name: GetPerformanceObligationsForProduct :many
SELECT po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
FROM product_performance_obligations ppo
INNER JOIN performance_obligations po ON po.ID = ppo.Performance_Obligations_ID
INNER JOIN contracts c ON c.ID = po.Contract_ID
WHERE ppo.Product_ID = $1
AND c.Company_ID = $2
ORDER BY po.Start_Date
`

type GetPerformanceObligationsForProductParams struct {
	ProductID uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) GetPerformanceObligationsForProduct(ctx context.Context, arg GetPerformanceObligationsForProductParams) ([]PerformanceObligation, error) {
	rows, err := q.db.QueryContext(ctx, getPerformanceObligationsForProduct, arg.ProductID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerformanceObligation
	for rows.Next() {
		var i PerformanceObligation
		if err := rows.Scan(
			&i.ID,
			&i.PerformanceObligationsName,
			&i.ContractID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.FunctionalCurrency,
			&i.Discount,
			&i.TransactionPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetBundlePerformanceObligations = `-- name: ResetBundlePerformanceObligations :exec
DELETE FROM bundle_performance_obligations
`

func (q *Queries) ResetBundlePerformanceObligations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetBundlePerformanceObligations)
	return err
}

const resetPerformanceObligations = `-- name: ResetPerformanceObligations :exec
DELETE FROM performance_obligations
`

func (q *Queries) ResetPerformanceObligations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPerformanceObligations)
	return err
}

const resetProductPerformanceObligations = `-- name: ResetProductPerformanceObligations :exec
DELETE FROM product_performance_obligations
`

func (q *Queries) ResetProductPerformanceObligations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetProductPerformanceObligations)
	return err
}

const updatePerformanceObligation = `-- name: UpdatePerformanceObligation :one
UPDATE performance_obligations po
SET
    Performance_Obligations_Name = $1,
    Contract_ID = $2,
    Start_Date = $3,
    End_Date = $4,
    Functional_Currency = $5,
    Discount = $6,
    Transaction_Price = $7
FROM contracts current_contract,
     contracts new_contract
WHERE po.ID = $8
AND current_contract.ID = po.Contract_ID
AND current_contract.Company_ID = $9
AND new_contract.ID = $2
AND new_contract.Company_ID = $9
RETURNING po.id, po.performance_obligations_name, po.contract_id, po.created_at, po.updated_at, po.start_date, po.end_date, po.functional_currency, po.discount, po.transaction_price
`

type UpdatePerformanceObligationParams struct {
	PerformanceObligationsName string
	ContractID                 uuid.UUID
	StartDate                  time.Time
	EndDate                    time.Time
	FunctionalCurrency         string
	Discount                   string
	TransactionPrice           int64
	ID                         uuid.UUID
	CompanyID                  uuid.UUID
}

func (q *Queries) UpdatePerformanceObligation(ctx context.Context, arg UpdatePerformanceObligationParams) (PerformanceObligation, error) {
	row := q.db.QueryRowContext(ctx, updatePerformanceObligation,
		arg.PerformanceObligationsName,
		arg.ContractID,
		arg.StartDate,
		arg.EndDate,
		arg.FunctionalCurrency,
		arg.Discount,
		arg.TransactionPrice,
		arg.ID,
		arg.CompanyID,
	)
	var i PerformanceObligation
	err := row.Scan(
		&i.ID,
		&i.PerformanceObligationsName,
		&i.ContractID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.FunctionalCurrency,
		&i.Discount,
		&i.TransactionPrice,
	)
	return i, err
}
