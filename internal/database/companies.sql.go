// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (Company_Name)
VALUES ($1)
RETURNING id, company_name, created_at, updated_at, is_active
`

func (q *Queries) CreateCompany(ctx context.Context, companyName string) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, companyName)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE ID = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getAllCompanies = `-- name: GetAllCompanies :many
SELECT id, company_name, created_at, updated_at, is_active FROM companies
`

func (q *Queries) GetAllCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT id, company_name, created_at, updated_at, is_active FROM companies
WHERE ID = $1
`

func (q *Queries) GetCompany(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const resetCompanies = `-- name: ResetCompanies :exec
DELETE FROM companies
`

func (q *Queries) ResetCompanies(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetCompanies)
	return err
}
