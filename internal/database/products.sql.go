// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    Company_ID,
    Prod_Name,
    Rev_Assessment,
    Over_Time_Percent,
    Point_In_Time_Percent,
    Standalone_Selling_Price_Method,
    Standalone_Selling_Price_Price_High,
    Standalone_Selling_Price_Price_Low,
    Default_Currency
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
RETURNING id, prod_name, rev_assessment, over_time_percent, point_in_time_percent, standalone_selling_price_method, standalone_selling_price_price_high, standalone_selling_price_price_low, company_id, is_active, default_currency, created_at
`

type CreateProductParams struct {
	CompanyID                       uuid.UUID
	ProdName                        string
	RevAssessment                   string
	OverTimePercent                 string
	PointInTimePercent              string
	StandaloneSellingPriceMethod    string
	StandaloneSellingPricePriceHigh string
	StandaloneSellingPricePriceLow  string
	DefaultCurrency                 string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.CompanyID,
		arg.ProdName,
		arg.RevAssessment,
		arg.OverTimePercent,
		arg.PointInTimePercent,
		arg.StandaloneSellingPriceMethod,
		arg.StandaloneSellingPricePriceHigh,
		arg.StandaloneSellingPricePriceLow,
		arg.DefaultCurrency,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProdName,
		&i.RevAssessment,
		&i.OverTimePercent,
		&i.PointInTimePercent,
		&i.StandaloneSellingPriceMethod,
		&i.StandaloneSellingPricePriceHigh,
		&i.StandaloneSellingPricePriceLow,
		&i.CompanyID,
		&i.IsActive,
		&i.DefaultCurrency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllProductsCompany = `-- name: DeleteAllProductsCompany :many
SELECT id, prod_name, rev_assessment, over_time_percent, point_in_time_percent, standalone_selling_price_method, standalone_selling_price_price_high, standalone_selling_price_price_low, company_id, is_active, default_currency, created_at FROM products
WHERE Company_ID = $1
`

func (q *Queries) DeleteAllProductsCompany(ctx context.Context, companyID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, deleteAllProductsCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProdName,
			&i.RevAssessment,
			&i.OverTimePercent,
			&i.PointInTimePercent,
			&i.StandaloneSellingPriceMethod,
			&i.StandaloneSellingPricePriceHigh,
			&i.StandaloneSellingPricePriceLow,
			&i.CompanyID,
			&i.IsActive,
			&i.DefaultCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE ID = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, prod_name, rev_assessment, over_time_percent, point_in_time_percent, standalone_selling_price_method, standalone_selling_price_price_high, standalone_selling_price_price_low, company_id, is_active, default_currency, created_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProdName,
			&i.RevAssessment,
			&i.OverTimePercent,
			&i.PointInTimePercent,
			&i.StandaloneSellingPriceMethod,
			&i.StandaloneSellingPricePriceHigh,
			&i.StandaloneSellingPricePriceLow,
			&i.CompanyID,
			&i.IsActive,
			&i.DefaultCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductsCompany = `-- name: GetAllProductsCompany :many
SELECT id, prod_name, rev_assessment, over_time_percent, point_in_time_percent, standalone_selling_price_method, standalone_selling_price_price_high, standalone_selling_price_price_low, company_id, is_active, default_currency, created_at FROM products
WHERE Company_ID = $1
`

func (q *Queries) GetAllProductsCompany(ctx context.Context, companyID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductsCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProdName,
			&i.RevAssessment,
			&i.OverTimePercent,
			&i.PointInTimePercent,
			&i.StandaloneSellingPriceMethod,
			&i.StandaloneSellingPricePriceHigh,
			&i.StandaloneSellingPricePriceLow,
			&i.CompanyID,
			&i.IsActive,
			&i.DefaultCurrency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, prod_name, rev_assessment, over_time_percent, point_in_time_percent, standalone_selling_price_method, standalone_selling_price_price_high, standalone_selling_price_price_low, company_id, is_active, default_currency, created_at FROM products
WHERE ID = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProdName,
		&i.RevAssessment,
		&i.OverTimePercent,
		&i.PointInTimePercent,
		&i.StandaloneSellingPriceMethod,
		&i.StandaloneSellingPricePriceHigh,
		&i.StandaloneSellingPricePriceLow,
		&i.CompanyID,
		&i.IsActive,
		&i.DefaultCurrency,
		&i.CreatedAt,
	)
	return i, err
}

const resetProducts = `-- name: ResetProducts :exec
Delete FROM products
`

func (q *Queries) ResetProducts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetProducts)
	return err
}
