// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (User_Name, Company_ID)
VALUES (
    $1,
    $2
)
RETURNING id, user_name, created_at, updated_at, company_id, is_active
`

type CreateUserParams struct {
	UserName  string
	CompanyID uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserName, arg.CompanyID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompanyID,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE ID = $1
AND Company_ID = $2
`

type DeleteUserParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID, arg.CompanyID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, user_name, created_at, updated_at, company_id, is_active FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompanyID,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersCompany = `-- name: GetAllUsersCompany :many
SELECT id, user_name, created_at, updated_at, company_id, is_active FROM users
WHERE Company_ID = $1
`

func (q *Queries) GetAllUsersCompany(ctx context.Context, companyID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompanyID,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, created_at, updated_at, company_id, is_active FROM users
WHERE ID = $1
AND Company_ID = $2
`

type GetUserParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.ID, arg.CompanyID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompanyID,
		&i.IsActive,
	)
	return i, err
}

const resetusers = `-- name: Resetusers :exec
Delete FROM users
`

func (q *Queries) Resetusers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetusers)
	return err
}
