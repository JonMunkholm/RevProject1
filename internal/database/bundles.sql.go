// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bundles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addProductToBundle = `-- name: AddProductToBundle :one
INSERT Into bundle_products (Bundle_ID, Product_ID)
VALUES (
    $1,
    $2
) RETURNING bundle_id, product_id
`

type AddProductToBundleParams struct {
	BundleID  uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) AddProductToBundle(ctx context.Context, arg AddProductToBundleParams) (BundleProduct, error) {
	row := q.db.QueryRowContext(ctx, addProductToBundle, arg.BundleID, arg.ProductID)
	var i BundleProduct
	err := row.Scan(&i.BundleID, &i.ProductID)
	return i, err
}

const clearBundleProducts = `-- name: ClearBundleProducts :exec
DELETE FROM bundle_products
WHERE Bundle_ID = $1
`

func (q *Queries) ClearBundleProducts(ctx context.Context, bundleID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearBundleProducts, bundleID)
	return err
}

const createBundle = `-- name: CreateBundle :one
INSERT INTO bundles (Bundle_Name, Company_ID)
VALUES (
    $1,
    $2
) RETURNING id, bundle_name, is_active, company_id
`

type CreateBundleParams struct {
	BundleName string
	CompanyID  uuid.UUID
}

func (q *Queries) CreateBundle(ctx context.Context, arg CreateBundleParams) (Bundle, error) {
	row := q.db.QueryRowContext(ctx, createBundle, arg.BundleName, arg.CompanyID)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.BundleName,
		&i.IsActive,
		&i.CompanyID,
	)
	return i, err
}

const deleteBundle = `-- name: DeleteBundle :exec
DELETE FROM bundles
WHERE ID = $1
AND Company_ID = $2
`

type DeleteBundleParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) DeleteBundle(ctx context.Context, arg DeleteBundleParams) error {
	_, err := q.db.ExecContext(ctx, deleteBundle, arg.ID, arg.CompanyID)
	return err
}

const deleteProductFromBundle = `-- name: DeleteProductFromBundle :exec
DELETE FROM bundle_products
WHERE Bundle_ID = $1
AND Product_ID = $2
`

type DeleteProductFromBundleParams struct {
	BundleID  uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) DeleteProductFromBundle(ctx context.Context, arg DeleteProductFromBundleParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductFromBundle, arg.BundleID, arg.ProductID)
	return err
}

const getAllBundleCompany = `-- name: GetAllBundleCompany :many
SELECT id, bundle_name, is_active, company_id FROM bundles
Where Company_ID = $1
`

func (q *Queries) GetAllBundleCompany(ctx context.Context, companyID uuid.UUID) ([]Bundle, error) {
	rows, err := q.db.QueryContext(ctx, getAllBundleCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bundle
	for rows.Next() {
		var i Bundle
		if err := rows.Scan(
			&i.ID,
			&i.BundleName,
			&i.IsActive,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBundles = `-- name: GetAllBundles :many
SELECT id, bundle_name, is_active, company_id FROM bundles
`

func (q *Queries) GetAllBundles(ctx context.Context) ([]Bundle, error) {
	rows, err := q.db.QueryContext(ctx, getAllBundles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bundle
	for rows.Next() {
		var i Bundle
		if err := rows.Scan(
			&i.ID,
			&i.BundleName,
			&i.IsActive,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBundle = `-- name: GetBundle :one
SELECT id, bundle_name, is_active, company_id FROM bundles
WHERE ID = $1
AND Company_ID = $2
`

type GetBundleParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
}

func (q *Queries) GetBundle(ctx context.Context, arg GetBundleParams) (Bundle, error) {
	row := q.db.QueryRowContext(ctx, getBundle, arg.ID, arg.CompanyID)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.BundleName,
		&i.IsActive,
		&i.CompanyID,
	)
	return i, err
}

const getBundleProducts = `-- name: GetBundleProducts :many
SELECT bundle_id, product_id FROM bundle_products
WHERE Bundle_ID = $1
`

func (q *Queries) GetBundleProducts(ctx context.Context, bundleID uuid.UUID) ([]BundleProduct, error) {
	rows, err := q.db.QueryContext(ctx, getBundleProducts, bundleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BundleProduct
	for rows.Next() {
		var i BundleProduct
		if err := rows.Scan(&i.BundleID, &i.ProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetBundles = `-- name: ResetBundles :exec
DELETE FROM bundles
`

func (q *Queries) ResetBundles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetBundles)
	return err
}
