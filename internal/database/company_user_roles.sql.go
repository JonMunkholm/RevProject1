// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company_user_roles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteCompanyUserRole = `-- name: DeleteCompanyUserRole :exec
DELETE FROM company_user_roles
WHERE company_id = $1
  AND user_id = $2
`

type DeleteCompanyUserRoleParams struct {
	CompanyID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) DeleteCompanyUserRole(ctx context.Context, arg DeleteCompanyUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyUserRole, arg.CompanyID, arg.UserID)
	return err
}

const listCompanyRolesForUser = `-- name: ListCompanyRolesForUser :many
SELECT company_id, user_id, role, created_at, updated_at
FROM company_user_roles
WHERE user_id = $1
ORDER BY company_id
`

func (q *Queries) ListCompanyRolesForUser(ctx context.Context, userID uuid.UUID) ([]CompanyUserRole, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyUserRole
	for rows.Next() {
		var i CompanyUserRole
		if err := rows.Scan(
			&i.CompanyID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyUserRoles = `-- name: ListCompanyUserRoles :many
SELECT company_id, user_id, role, created_at, updated_at
FROM company_user_roles
WHERE company_id = $1
ORDER BY user_id
`

func (q *Queries) ListCompanyUserRoles(ctx context.Context, companyID uuid.UUID) ([]CompanyUserRole, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyUserRoles, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyUserRole
	for rows.Next() {
		var i CompanyUserRole
		if err := rows.Scan(
			&i.CompanyID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCompanyUserRole = `-- name: UpsertCompanyUserRole :one
INSERT INTO company_user_roles (company_id, user_id, role)
VALUES ($1, $2, $3)
ON CONFLICT (company_id, user_id)
    DO UPDATE SET role = EXCLUDED.role
RETURNING company_id, user_id, role, created_at, updated_at
`

type UpsertCompanyUserRoleParams struct {
	CompanyID uuid.UUID
	UserID    uuid.UUID
	Role      string
}

func (q *Queries) UpsertCompanyUserRole(ctx context.Context, arg UpsertCompanyUserRoleParams) (CompanyUserRole, error) {
	row := q.db.QueryRowContext(ctx, upsertCompanyUserRole, arg.CompanyID, arg.UserID, arg.Role)
	var i CompanyUserRole
	err := row.Scan(
		&i.CompanyID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
