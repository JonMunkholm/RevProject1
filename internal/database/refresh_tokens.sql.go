// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (
    User_ID,
    Token_Hash,
    Issued_IP,
    User_Agent,
    Expires_At
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID
	TokenHash []byte
	IssuedIp  pqtype.Inet
	UserAgent sql.NullString
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.IssuedIp,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	return err
}

const getRefreshTokenByHash = `-- name: GetRefreshTokenByHash :one
SELECT
    ID,
    User_ID,
    Token_Hash,
    Issued_IP,
    User_Agent,
    Created_At,
    Updated_At,
    Expires_At,
    Revoked_At
FROM refresh_tokens
WHERE Token_Hash = $1
  AND (Revoked_At IS NULL OR $2)
`

type GetRefreshTokenByHashParams struct {
	TokenHash      []byte
	IncludeRevoked interface{}
}

func (q *Queries) GetRefreshTokenByHash(ctx context.Context, arg GetRefreshTokenByHashParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByHash, arg.TokenHash, arg.IncludeRevoked)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IssuedIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET Revoked_At = COALESCE($1, CURRENT_TIMESTAMP)
WHERE ID = $2
  AND Revoked_At IS NULL
`

type RevokeRefreshTokenParams struct {
	RevokedAt sql.NullTime
	ID        uuid.UUID
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.RevokedAt, arg.ID)
	return err
}
